Configure with cmake -DENABLE_GRAPHICS=1 to turn on both real-time display and graphics file output

Example of setting graphics file output
   export GRAPHICS_TYPE=PNG 

Options are DATA, BMP, GIF, JPEG, MPEG, PDF, PNG, SVG

You can generate movies from these files with

************************************* scripts ************************************
This is the code for generating the images and movies. The generate_image.py, 
generate_movie.sh, and FreeSansBold.ttf should be placed just outside of the graphics_output
directory. They will go into this directory to generate all image and movie data. The 
movies that are generated are avi files, but they can be converted to any format using
on-line video converters. I did this, because the best quality for the movies is  
generated by first making a avi file. The on-line movie converter I used was at  
video.online-convert.com. Mplayer can be used in Linux to just play the movie in an  
X-Terminal if you pass it the avi file.

FreeSansBold.tff: This is just the text file used by the python script to create the 
    lettering for number of iterations and time steps in the images. This file, 
    generate_image.py, and generate_movie.sh are all needed to create the movies. They
    all just need to be in the same directory as the grahpics_info file that contains
    the graphics information from the simulation. If you just want to create the images
    and not the movie, then only this file and generate_image.py are needed in the 
    same directory as the graphics_output directory.

generate_image.py: This is python script that is used to generate the images from the 
    CLAMR simulation. The image data needs to be a directory called graphics_output. The 
    python script will go into this directory and generate the png files as well as an
    text file called image list, which is used to generate a movie. You can pass the y
    flag to this script if you want to have grid lines in the images as well. All image
    data is saved in the .data files and all gridlines data is saved in the .lin files.
    The FreeSansBold.ttf is needed to create the text in each image for the Iteration
    number and Time Step values.

generate_movie.sh: This script uses the python code above to first generate the images,
    and then generate a movie out the images. This script has a three flags that can be
    used. They are explained below. The movie that is generated is dumped in the current
    directory with the label test.avi
    -y: Defines whether you want gridlines in the images for the movie generated
        (False by default)
    -f: How many FPS you want the movie to be (6 by default)
    -s: What size do you want the images in the movie to be (800x800 by default).

